apiVersion: batch/v1
kind: Job
metadata:
  name: enhanced-crypto-prices-volume-test
  namespace: crypto-collectors
spec:
  template:
    spec:
      containers:
      - name: enhanced-crypto-prices
        image: enhanced-crypto-prices:volume-fix
        imagePullPolicy: Never
        env:
        - name: MYSQL_HOST
          value: host.docker.internal
        - name: MYSQL_PORT
          value: "3306"
        - name: MYSQL_USER
          value: news_collector
        - name: MYSQL_PASSWORD
          value: 99Rules!
        - name: MYSQL_DATABASE
          value: crypto_prices
        - name: LOG_LEVEL
          value: DEBUG
        - name: CRYPTO_PRICES_TABLE
          value: price_data
        - name: HIGH_COLUMN
          value: high
        - name: LOW_COLUMN
          value: low
        - name: OPEN_COLUMN
          value: open
        - name: VOLUME_COLUMN
          value: volume
        command: ["python", "-c"]
        args:
        - |
          import asyncio
          import logging
          from main import EnhancedCryptoPricesService
          
          async def test_volume_collection():
              service = EnhancedCryptoPricesService()
              
              # Get a small sample of symbols for testing
              symbols = service.get_coinbase_symbols()[:5]
              print(f"Testing volume collection for symbols: {symbols}")
              
              # Collect price data
              prices = []
              for symbol in symbols:
                  price_data = await service.get_price_for_symbol(symbol)
                  if price_data:
                      print(f"Symbol: {price_data['symbol']}")
                      print(f"  Current Price: {price_data.get('current_price')}")
                      print(f"  Market Cap: {price_data.get('market_cap')}")
                      print(f"  Volume: {price_data.get('total_volume')}")
                      print()
                      prices.append(price_data)
              
              # Store to database
              if prices:
                  stored_count = service.store_prices_to_mysql(prices)
                  print(f"Stored {stored_count} records with volume data")
              else:
                  print("No prices collected")
          
          if __name__ == "__main__":
              asyncio.run(test_volume_collection())
      restartPolicy: Never
      nodeSelector:
        solution-area: data-platform
      tolerations:
      - effect: NoSchedule
        key: data-platform
        operator: Equal
        value: "true"
  backoffLimit: 1