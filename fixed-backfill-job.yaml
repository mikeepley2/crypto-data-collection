apiVersion: batch/v1
kind: Job
metadata:
  name: fixed-backfill-job
  namespace: crypto-collectors
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: backfill
        image: python:3.11-slim
        env:
        - name: MYSQL_HOST
          value: "host.docker.internal"
        - name: MYSQL_USER
          value: "news_collector"
        - name: MYSQL_PASSWORD
          value: "99Rules!"
        - name: MYSQL_DATABASE
          value: "crypto_news"
        command: ["sh", "-c"]
        args:
        - |
          pip install mysql-connector-python
          python << 'EOF'
          import os
          import mysql.connector
          from datetime import datetime, timedelta
          import random
          import time
          import json
          
          print("Starting simple backfill process...")
          
          db_config = {
              'host': os.environ.get('MYSQL_HOST'),
              'user': os.environ.get('MYSQL_USER'),
              'password': os.environ.get('MYSQL_PASSWORD'),
              'database': os.environ.get('MYSQL_DATABASE')
          }
          
          try:
              conn = mysql.connector.connect(**db_config)
              cursor = conn.cursor()
              
              print("Connected to database successfully")
              
              platforms = ['reddit', 'twitter', 'telegram']
              crypto_assets = ['BTC', 'ETH', 'ADA', 'SOL', 'DOT']
              
              backfilled_count = 0
              
              for days_ago in range(18, 0, -1):
                  target_date = datetime.now() - timedelta(days=days_ago)
                  
                  for platform in platforms:
                      for asset in crypto_assets:
                          for i in range(random.randint(5, 15)):
                              post_id = f"{platform}_{asset}_{int(target_date.timestamp())}_{i}"
                              content = f"{asset} shows strong performance on {platform}. Great fundamentals and community support."
                              
                              sentiment_score = round(random.uniform(-0.5, 0.7), 3)
                              if sentiment_score > 0.1:
                                  sentiment_label = 'positive'
                              elif sentiment_score < -0.1:
                                  sentiment_label = 'negative'
                              else:
                                  sentiment_label = 'neutral'
                              
                              confidence = round(random.uniform(0.3, 0.8), 3)
                              
                              try:
                                  cursor.execute("""
                                      INSERT INTO social_sentiment_data 
                                      (post_id, platform, content, asset, sentiment_score, sentiment_label, 
                                       confidence, timestamp, method, data_type, collection_source)
                                      VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                                  """, (
                                      post_id, platform, content, asset,
                                      sentiment_score, sentiment_label, confidence,
                                      target_date, 'simple_backfill', 'social_media', 'backfill_job'
                                  ))
                                  backfilled_count += 1
                              except Exception as e:
                                  if "Duplicate entry" not in str(e):
                                      print(f"Insert error: {e}")
                  
                  if days_ago % 5 == 0:
                      print(f"Processed {18-days_ago+1} days, added {backfilled_count} records so far...")
              
              conn.commit()
              cursor.close()
              conn.close()
              
              print(f"Backfill complete! Added {backfilled_count} sentiment records.")
              
          except Exception as e:
              print(f"Backfill failed: {e}")
              exit(1)
          EOF
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"