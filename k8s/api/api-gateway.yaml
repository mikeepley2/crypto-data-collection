---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: crypto-data-collection
  labels:
    app: api-gateway
    component: api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
        component: api
    spec:
      containers:
      - name: api-gateway
        image: crypto-data-collection/api-gateway:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http
        env:
        # Database Configuration
        - name: MYSQL_HOST
          value: "mysql"
        - name: MYSQL_PORT
          value: "3306"
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: crypto-secrets
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: crypto-secrets
              key: mysql-password
        - name: MYSQL_DATABASE
          value: "crypto_prices"
        - name: REDIS_HOST
          value: "redis"
        - name: REDIS_PORT
          value: "6379"
        
        # API Keys
        - name: COINGECKO_API_KEY
          valueFrom:
            secretKeyRef:
              name: api-keys
              key: COINGECKO_API_KEY
        - name: FRED_API_KEY
          valueFrom:
            secretKeyRef:
              name: api-keys
              key: FRED_API_KEY
        - name: GUARDIAN_API_KEY
          valueFrom:
            secretKeyRef:
              name: api-keys
              key: GUARDIAN_API_KEY
        
        # Security
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: api-security
              key: JWT_SECRET_KEY
        - name: API_KEY_MASTER
          valueFrom:
            secretKeyRef:
              name: api-security
              key: API_KEY_MASTER
        
        # Application Configuration
        - name: LOG_LEVEL
          value: "INFO"
        - name: ENVIRONMENT
          value: "production"
        
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        volumeMounts:
        - name: logs
          mountPath: /app/logs
      
      volumes:
      - name: logs
        emptyDir: {}
      
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-service
  namespace: crypto-data-collection
  labels:
    app: api-gateway
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: api-gateway
---
# Ingress for external access (optional)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-gateway-ingress
  namespace: crypto-data-collection
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: crypto-api.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-gateway-service
            port:
              number: 8000