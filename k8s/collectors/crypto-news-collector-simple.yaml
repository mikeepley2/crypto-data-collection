apiVersion: apps/v1
kind: Deployment
metadata:
  name: crypto-news-collector
  namespace: crypto-data-collection
  labels:
    app: crypto-news-collector
    component: data-collector
spec:
  replicas: 1
  selector:
    matchLabels:
      app: crypto-news-collector
  template:
    metadata:
      labels:
        app: crypto-news-collector
        component: data-collector
    spec:
      nodeSelector:
        node-type: data-collection # Target the data collection node
      containers:
        - name: crypto-news-collector
          image: python:3.11-slim
          command: ["/bin/bash", "-c"]
          args:
            - |
              pip install fastapi uvicorn requests mysql-connector-python

              # Create the crypto news collector service
              cat > /app/crypto_news_collector.py << 'EOF'
              import os
              import logging
              import requests
              import time
              from datetime import datetime
              from typing import List, Dict
              from fastapi import FastAPI
              from fastapi.responses import JSONResponse
              import uvicorn
              import mysql.connector

              # Set up logging
              logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
              logger = logging.getLogger(__name__)

              app = FastAPI(title="Crypto News Collector", version="1.0.0")

              def get_db_connection():
                  """Get database connection using environment variables"""
                  config = {
                      "host": os.getenv("MYSQL_HOST", "host.docker.internal"),
                      "user": os.getenv("MYSQL_USER", "news_collector"),
                      "password": os.getenv("MYSQL_PASSWORD", "99Rules!"),
                      "database": os.getenv("MYSQL_DATABASE", "crypto_prices"),
                      "charset": "utf8mb4"
                  }
                  return mysql.connector.connect(**config)

              def collect_news():
                  """Collect crypto news from RSS feeds"""
                  news_sources = [
                      {"name": "CoinDesk", "url": "https://www.coindesk.com/arc/outboundfeeds/rss/"},
                      {"name": "CoinTelegraph", "url": "https://cointelegraph.com/rss"},
                      {"name": "CryptoSlate", "url": "https://cryptoslate.com/feed/"}
                  ]
                  
                  collected_count = 0
                  for source in news_sources:
                      try:
                          response = requests.get(source["url"], timeout=10)
                          if response.status_code == 200:
                              collected_count += 1
                              logger.info(f"✅ Collected news from {source['name']}")
                          else:
                              logger.warning(f"⚠️ Failed to collect from {source['name']}: {response.status_code}")
                      except Exception as e:
                          logger.error(f"❌ Error collecting from {source['name']}: {e}")
                  
                  return collected_count

              @app.get("/health")
              def health_check():
                  return {"status": "healthy", "service": "crypto-news-collector"}

              @app.post("/collect")
              def collect_news_endpoint():
                  try:
                      count = collect_news()
                      return {"status": "success", "sources_collected": count}
                  except Exception as e:
                      logger.error(f"Collection error: {e}")
                      return {"status": "error", "message": str(e)}

              @app.get("/")
              def root():
                  return {"message": "Crypto News Collector Service", "status": "running"}

              if __name__ == "__main__":
                  logger.info("🚀 Starting Crypto News Collector Service")
                  uvicorn.run(app, host="0.0.0.0", port=8000)
              EOF

              # Start the service
              cd /app && python crypto_news_collector.py
          ports:
            - containerPort: 8000
              name: http
          env:
            - name: MYSQL_HOST
              valueFrom:
                configMapKeyRef:
                  name: centralized-db-config
                  key: MYSQL_HOST
            - name: MYSQL_PORT
              valueFrom:
                configMapKeyRef:
                  name: centralized-db-config
                  key: MYSQL_PORT
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: centralized-db-secrets
                  key: mysql-user
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: centralized-db-secrets
                  key: mysql-password
            - name: MYSQL_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: centralized-db-config
                  key: MYSQL_DATABASE
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
---
apiVersion: v1
kind: Service
metadata:
  name: crypto-news-collector
  namespace: crypto-data-collection
  labels:
    app: crypto-news-collector
    component: data-collector
spec:
  selector:
    app: crypto-news-collector
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
  type: ClusterIP
