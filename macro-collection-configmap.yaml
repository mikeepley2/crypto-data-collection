apiVersion: v1
kind: ConfigMap
metadata:
  name: macro-collection-script
  namespace: crypto-collectors
data:
  collect_macro.py: |
    #!/usr/bin/env python3
    import yfinance as yf
    import mysql.connector
    from datetime import datetime
    import os
    
    # Database configuration from environment
    db_config = {
        'host': os.getenv('MYSQL_HOST', 'host.docker.internal'),
        'user': os.getenv('MYSQL_USER', 'news_collector'),
        'password': os.getenv('MYSQL_PASSWORD', '99Rules!'),
        'database': os.getenv('MYSQL_DATABASE', 'crypto_prices')
    }
    
    print("=== AUTOMATED MACRO DATA COLLECTION ===")
    print(f"Timestamp: {datetime.now()}")
    
    # Market indicators to collect
    symbols = {
        '^VIX': 'VIX',
        '^GSPC': 'SPX', 
        'DX-Y.NYB': 'DXY',
        '^TNX': 'TNX',
        'GC=F': 'GOLD',
        'CL=F': 'OIL'
    }
    
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()
    
    total_updated = 0
    errors = 0
    
    try:
        for symbol, indicator_name in symbols.items():
            print(f"Collecting {indicator_name} ({symbol})...")
            
            try:
                ticker = yf.Ticker(symbol)
                hist = ticker.history(period='2d')
                
                if not hist.empty:
                    latest_close = hist['Close'].iloc[-1]
                    latest_date = hist.index[-1].date()
                    
                    cursor.execute("""
                        INSERT INTO macro_indicators (
                            indicator_name, indicator_date, value,
                            data_source, frequency, collected_at
                        ) VALUES (%s, %s, %s, %s, %s, %s)
                        ON DUPLICATE KEY UPDATE
                            value = VALUES(value),
                            collected_at = VALUES(collected_at)
                    """, (
                        indicator_name, latest_date, float(latest_close),
                        'automated_yahoo_finance', 'daily', datetime.now()
                    ))
                    
                    total_updated += 1
                    print(f"   Updated: {indicator_name} = {latest_close:.2f}")
                else:
                    print(f"   No data found for {symbol}")
                    errors += 1
                    
            except Exception as e:
                print(f"   Error collecting {symbol}: {e}")
                errors += 1
        
        conn.commit()
        
    finally:
        cursor.close()
        conn.close()
    
    print(f"\nCollection complete:")
    print(f"   Indicators updated: {total_updated}")
    print(f"   Errors: {errors}")
    print(f"   Success rate: {(total_updated/(total_updated+errors))*100:.1f}%")
    
    # Exit with error code if too many failures
    if errors > total_updated:
        exit(1)
    else:
        exit(0)