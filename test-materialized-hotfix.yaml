apiVersion: batch/v1
kind: Job
metadata:
  name: test-materialized-hotfix
  namespace: crypto-collectors
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: materialized-updater
        image: aitest-materialized-updater:latest
        command: ["python", "-c"]
        args:
        - |
          import mysql.connector
          import os
          import logging
          
          logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
          logger = logging.getLogger(__name__)
          
          def get_db_connection():
              return mysql.connector.connect(
                  host=os.environ.get('MYSQL_HOST', 'host.docker.internal'),
                  user=os.environ.get('MYSQL_USER', 'crypto_user'),
                  password=os.environ.get('MYSQL_PASSWORD', 'crypto_password'),
                  database=os.environ.get('MYSQL_DATABASE', 'crypto_prices'),
                  autocommit=True
              )
          
          # Test the column mapping by running a simple query
          conn = get_db_connection()
          cursor = conn.cursor(dictionary=True)
          
          # Test environment variables
          source_timestamp_col = os.getenv('SOURCE_TIMESTAMP_COLUMN', 'timestamp')
          current_price_col = os.getenv('CURRENT_PRICE_COLUMN', 'close')
          target_timestamp_col = os.getenv('TARGET_TIMESTAMP_COLUMN', 'timestamp_iso')
          
          print(f"SOURCE_TIMESTAMP_COLUMN: {source_timestamp_col}")
          print(f"CURRENT_PRICE_COLUMN: {current_price_col}")
          print(f"TARGET_TIMESTAMP_COLUMN: {target_timestamp_col}")
          
          # Test query on price_data
          try:
              query = f"""
              SELECT symbol, {source_timestamp_col} as timestamp_source, {current_price_col} as current_price 
              FROM price_data 
              WHERE symbol = 'BTC' 
              ORDER BY {source_timestamp_col} DESC 
              LIMIT 5
              """
              print(f"Test query: {query}")
              cursor.execute(query)
              results = cursor.fetchall()
              print(f"Found {len(results)} BTC records")
              for result in results:
                  print(f"  - {result['symbol']}: {result['timestamp_source']} = ${result['current_price']}")
          except Exception as e:
              print(f"Query failed: {e}")
          
          cursor.close()
          conn.close()
        env:
        - name: MYSQL_HOST
          value: "host.docker.internal"
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: crypto-db-secrets
              key: username
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: crypto-db-secrets
              key: password
        - name: MYSQL_DATABASE
          value: "crypto_prices"
        - name: SOURCE_TIMESTAMP_COLUMN
          value: "timestamp"
        - name: TARGET_TIMESTAMP_COLUMN
          value: "timestamp_iso"
        - name: CURRENT_PRICE_COLUMN
          value: "close"
        - name: VOLUME_COLUMN
          value: "volume"
      tolerations:
      - key: analytics-infrastructure
        operator: Equal
        value: "true"
        effect: NoSchedule
      - key: data-platform
        operator: Equal
        value: "true"
        effect: NoSchedule
      - key: trading-engine
        operator: Equal
        value: "true"
        effect: NoSchedule